{% extends 'base.html.twig' %}
{% block title %}Viewer 3D{% endblock %}
{% block navbar %}
{% endblock %}
{% block body %}
    <div class="loader">
        <img style="width:100px" class="text-center img center-block img-responsive" src="{{ asset('bundles/viewer/img/loader.gif') }}"/>
    </div>
    <div class="global no-padding col-md-12 col-xs-12 col-lg-12">
        <div class="left-part">
            <div class="col-md-5 col-xs-12 no-padding" id="malloc"></div>
            <div class="col-md-5 col-xs-12 no-padding" id="setup"></div>
            <div class="col-md-10 col-xs-12 no-padding" id="combined"></div>
        </div>


        <div class="col-md-2 col-xs-12 no-padding" id="infos">
            <h2 class="text-center" style="margin-top: 20px"><a class="titleViewerNoir">INFOS</a><a class="titleViewerBlanc">PATIENT</a> </h2>
            <ul class="list-group infosBlock">
                {% if folder.ref != '' %}
                    <li class="text-center list-group-item infosViewer">
                        <p class="infosTitleViewer">REF. PATIENT</p>
                        <p class="infosTextViewer">{{ folder.ref }}</p>
                    </li>
                {% endif  %}
                {% if folder.nom != '' %}
                    <li class="text-center list-group-item infosViewer">
                        <p class="infosTitleViewer">NOM PATIENT</p>
                        <p class="infosTextViewer">{{ folder.nom }}</p>
                    </li>
                {% endif  %}
                {% if folder.commentaire != '' %}
                    <li class="text-center list-group-item infosViewer">
                        <p class="infosTitleViewer">COMMENTAIRE</p>
                        <p class="infosTextViewer">{{ folder.commentaire }}</p>
                    </li>
                {% endif %}
                {% if folder.nbGtS!= '' %}
                    <li class="text-center list-group-item infosViewer">
                        <p class="infosTitleViewer">GOUTTIÈRES SUP. NÉCÉSSAIRES</p>
                        <p class="infosTextViewer">{{ folder.nbGtS }} gouttière(s)</p>
                    </li>
                {% endif  %}
                {% if folder.nbGtI != '' %}
                    <li class="text-center list-group-item infosViewer">
                        <p class="infosTitleViewer">GOUTTIÈRES INF. NÉCÉSSAIRES</p>
                        <p class="infosTextViewer">{{ folder.nbGtI }} gouttière(s)</p>
                    </li>
                {% endif  %}
                {% if folder.estimationTraitement != '' %}
                    <li class="text-center list-group-item infosViewer">
                        <p class="infosTitleViewer">TEMPS DE TRAITEMENT ESTIMÉ</p>
                        <p class="infosTextViewer">{{ folder.estimationTraitement }} Semaines</p>
                    </li>
                {% endif  %}
            </ul>
        </div>
        <div class="hud">
            <div class="container" style="margin-left: 20px">
                <img class="btn-hud" id="right" style="height:51px; margin-left: 40px; margin-right:-4px; margin-top:21px;" src="{{ asset('bundles/viewer/img/coteA.png') }}">
                <img class="btn-hud" id="face" style="height:50px; margin-right:-4px; margin-top:20px;" src="{{ asset('bundles/viewer/img/face.png') }}">
                <img class="btn-hud" id="left" style="height:51px; margin-top:21px;" src="{{ asset('bundles/viewer/img/coteB.png') }}">
            </div>
            <div style="margin-left: 20px">
                <img class="btn-hud" id="max" style="width:50px; margin-top:5px;" src="{{ asset('bundles/viewer/img/sup.png') }}"/>
                <img class="btn-hud" id="double" style="width:50px; margin-top:-4px;" src="{{ asset('bundles/viewer/img/double.png') }}"/>
                <img class="btn-hud" id="mand" style="width:50px; margin-top:-4px;" src="{{ asset('bundles/viewer/img/inf.png') }}"/>
            </div>
        </div>
        <div class="hud2">
            <form autocomplete="off"><input max="3" min="0" name="choice_view" id="choice_view" type="range" value="2"></form>
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    <style>
        @media screen and (min-width: 200px) and (max-width: 700px) {
            #setup, #malloc {
                height:50vh!important;
            }
            #infos {
                display:none;
            }
        }

        .global{
            background-color: #fff;
        }

        #setup, #malloc, #combined {
            height:100vh;
            background: linear-gradient(to top, #2980B9, #31C5F4);
        }
        body {
            overflow: hidden;
            margin: 0;
            padding: 0;
            background-color: #000000;
        }
        .img {
            margin-top: 50vh; /* poussé de la moitié de hauteur de viewport */
            transform: translateY(-50%); /* tiré de la moitié de sa propre hauteur */
        }
        .loader {
            width:100vw;
            height:100vh;
            z-index: 1000;
        }
        .no-padding {
            padding:0!important;
        }
        p {
            margin: 0;
            padding: 0;
        }
        #combined {
            display:none;
        }
        a {
            color: #f58231;
        }
        .hud {
            position:fixed;
            width:40px;
            display:none;
        }
        .hud2 {
            position:fixed;
            bottom:0;
            left:37vw;
        }
        .btn-hud {
            color:white;
            font-size:40px;
            cursor:pointer;
        }
    </style>
{% endblock %}

{% block javascript %}
    <script src="{{ asset('bundles/viewer/js/three.js') }}"></script>
    <script src="{{ asset('bundles/viewer/js/Detector.js') }}"></script>
    <script src="{{ asset('bundles/viewer/js/OrbitControls.js') }}"></script>
    <script src="{{ asset('bundles/viewer/js/OBJLoader.js') }}"></script>
    <script src="{{ asset('bundles/viewer/js/MTLLoader.js') }}"></script>

    <script>

        if (!Detector.webgl) {
            Detector.addGetWebGLMessage();
        }

        var containerMalloc, containerSetup;

        var camera, controls, controls2, scene, scene2, rendererMalloc, rendererSetup;
        var lighting, ambient, keyLight, fillLight, backLight;
        var firstAnimationRequest;

        var windowHalfX = window.innerWidth / 2;
        var windowHalfY = window.innerHeight / 2;

        init();
        animateDouble();

        function init() {

            containerMalloc = document.getElementById('malloc');
            containerSetup = document.getElementById('setup');

            /* Loader */
            var manager = new THREE.LoadingManager();
            manager.onProgress = function (item, loaded, total) {
                console.log(item, loaded, total);
                if (loaded == 8) { // Quand 8 fichiers ont été chargés, le loader s'enlève
                    $('.loader').fadeOut("slow", function () {
                        $('.hud').show();
                    });
                    position();
                }
            };
            var onProgress = function (xhr) {
                if (xhr.lengthComputable) {
                    var percentComplete = xhr.loaded / xhr.total * 100;
                    console.log(Math.round(percentComplete, 2) + '% downloaded');
                }
            };
            var onError = function (xhr) {
            };

            /* Cameras */
            camera = new THREE.PerspectiveCamera(20, containerMalloc.offsetWidth / containerMalloc.offsetHeight, 1, 10000);
            camera.position.z = 300;


            /* Scene */

            scene = new THREE.Scene();
            scene2 = new THREE.Scene();

            /* Light */

            lighting = false;

            var light = new THREE.AmbientLight(0xcccccc); // soft white light
            scene.add(light);

            var light2 = new THREE.SpotLight(0xffffff);
            light2.position.set(0, 100, 100);
            light2.castShadow = true;
            light2.shadow.mapSize.width = 500;
            light2.shadow.mapSize.height = 500;
            light2.shadow.camera.near = 500;
            light2.shadow.camera.far = 400;
            light2.shadow.camera.fov = 30;
            scene.add(light2);

            var light3 = new THREE.DirectionalLight(0x999999);
            light3.position.set(0, -100, -50);
            scene.add(light3);


            var light4 = new THREE.AmbientLight(0xffffff); // soft white light
            scene2.add(light4);


            var light5 = new THREE.SpotLight(0xffffff, 1, 186, 1, 0, 2);
            light5.position.set(0, 100, 100);
            light5.castShadow = true;
            light5.shadow.mapSize.width = 500;
            light5.shadow.mapSize.height = 500;
            light5.shadow.camera.near = 500;
            light5.shadow.camera.far = 400;
            light5.shadow.camera.fov = 30;
            scene2.add(light5);

            var light6 = new THREE.DirectionalLight(0x1D3824, 0.5);
            light6.position.set(0, -100, -50);
            scene2.add(light6);

            var light7 = new THREE.DirectionalLight(0x1D3824, 0.5);
            light7.position.set(10, 30, 50);
            scene2.add(light7);

            var light8 = new THREE.DirectionalLight(0x4ABD6A, 0.5);
            light8.position.set(-50, 100, 50);
            scene2.add(light8);


            /* Model */

            var mtlLoader = new THREE.MTLLoader(manager);
            mtlLoader.setBaseUrl('../../uploads/documents/');
            mtlLoader.setPath('../../uploads/documents/');
            mtlLoader.load('{{ folder.mallocmaxMtl }}', function (materials) {
                var objLoader = new THREE.OBJLoader();
                objLoader.setMaterials(materials);
                objLoader.setPath('../../uploads/documents/');
                objLoader.load('{{ folder.mallocmaxObj }}', function (object) {
                    object.name = "mallocmax";
                    scene.add(object);
                });
            }, onProgress, onError);

            mtlLoader.load('{{ folder.setupmaxMtl }}', function (materials) {
                var objLoader = new THREE.OBJLoader();
                objLoader.setMaterials(materials);
                objLoader.setPath('../../uploads/documents/');
                objLoader.load('{{ folder.setupmaxObj }}', function (object) {
                    object.name = 'setupmax';
                    scene2.add(object);
                }, onProgress, onError);
            });


            mtlLoader.load('{{ folder.mallocmandMtl }}', function (materials) {
                var objLoader = new THREE.OBJLoader();
                objLoader.setMaterials(materials);
                objLoader.setPath('../../uploads/documents/');
                objLoader.load('{{ folder.mallocmandObj }}', function (object) {
                    object.name = 'mallocmand';
                    object.visible = false;
                    scene.add(object);
                }, onProgress, onError);
            });

            mtlLoader.load('{{ folder.setupmandMtl }}', function (materials) {
                var objLoader = new THREE.OBJLoader();
                objLoader.setMaterials(materials);
                objLoader.setPath('../../uploads/documents/');
                objLoader.load('{{ folder.setupmandObj }}', function (object) {
                    object.name = 'setupmand';
                    object.visible = false;
                    scene2.add(object);
                }, onProgress, onError);
            });
            /* Renderer */

            // Display des malloc //
            rendererMalloc = new THREE.WebGLRenderer({antialias: true, alpha: true});
            rendererMalloc.setSize(containerMalloc.offsetWidth, containerMalloc.offsetHeight);
            rendererMalloc.setPixelRatio(window.devicePixelRatio);

            // Display des setup //
            rendererSetup = new THREE.WebGLRenderer({antialias: true, alpha: true});
            rendererSetup.setPixelRatio(window.devicePixelRatio);
            rendererSetup.setSize(containerSetup.offsetWidth, containerSetup.offsetHeight);
/*
            rendererSetup.setClearColor(new THREE.Color("hsl(0, 0%, 10%)"));
*/

            containerMalloc.appendChild(rendererMalloc.domElement);
            containerSetup.appendChild(rendererSetup.domElement);


            /* Controls */

            controls = new THREE.OrbitControls(camera, rendererMalloc.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.25;
            controls.enableZoom = true;

            controls2 = new THREE.OrbitControls(camera, rendererSetup.domElement);
            controls2.enableDamping = true;
            controls2.dampingFactor = 0.25;
            controls2.enableZoom = true;

            /* Event */

            window.addEventListener('resize', onWindowResize, false);
        }
        function onWindowResize() {
            windowHalfX = window.innerWidth / 2;
            windowHalfY = window.innerHeight / 2;
            if (containerMalloc.offsetWidth == 0) {
                camera.aspect = containerSetup.offsetWidth / containerSetup.offsetHeight;
            } else {
                camera.aspect = containerMalloc.offsetWidth / containerMalloc.offsetHeight;
            }
            camera.updateProjectionMatrix();
            rendererMalloc.setSize(containerMalloc.offsetWidth, containerMalloc.offsetHeight);
            rendererSetup.setSize(containerSetup.offsetWidth, containerSetup.offsetHeight);


            var placementHud2 = $('.left-part').width() * 0.5 - $('#hud2').width();
            $('#hud2').css('left', placementHud2 + 'px');
        }

        // Start animations
        function animateDouble() {

            firstAnimationRequest = requestAnimationFrame(animateDouble);
            controls.update();
            controls2.update();

            firstRender();

        }


        // Stop animation
        function stopDouble() {
            if (firstAnimationRequest) {
                window.cancelAnimationFrame(firstAnimationRequest);
                firstAnimationRequest = undefined;
            }
        }


        function firstRender() {
            rendererMalloc.render(scene, camera);
            rendererSetup.render(scene2, camera);
        }


        $('#face').click(function () {
            camera.position.x = -15;
            camera.position.y = 92;
            camera.position.z = 239;
        });

        $('#right').click(function () {
            camera.position.x = -256;
            camera.position.y = -5;
            camera.position.z = -8;
        });

        $('#left').click(function () {
            camera.position.x = 256;
            camera.position.y = -5;
            camera.position.z = -8;
        });

        function position() {
            var actualPosition = 'maxilaire';
            var mallocmax = scene.getObjectByName("mallocmax");
            var setupmax = scene2.getObjectByName("setupmax");
            var mallocmand = scene.getObjectByName("mallocmand");
            var setupmand = scene2.getObjectByName("setupmand");
            $('#max').click(function () {
                mallocmand.visible = false;
                setupmand.visible = false;
                mallocmax.visible = true;
                setupmax.visible = true;
                actualPosition = 'maxilaire';
            });

            $('#mand').click(function () {
                mallocmand.visible = true;
                setupmand.visible = true;
                mallocmax.visible = false;
                setupmax.visible = false;
                actualPosition = 'mandibulaire';
            });

            $('#double').click(function () {
                mallocmand.visible = true;
                setupmand.visible = true;
                mallocmax.visible = true;
                setupmax.visible = true;
                actualPosition = 'double';
            });

            $(document).on('input change', '#choice_view', function () {
                var choice = $(this).val();
                var selectedObjet = scene2.getObjectByName("mallocmax");



                if (choice == 0) { // Choix 0 corréspond à l'affichage "avant"
                    // on cache la partie setup ("après")
                    // on augmente la taille de la partie avant,
                    // on relance l'animation et on indique que la taille à changée avec "onWindowResize"
                    $('#setup').hide();
                    $('#malloc').removeClass().addClass('no-padding col-md-10').show();
                    scene2.remove(mallocmax);
                    scene2.remove(mallocmand);
                    scene.add(mallocmax);
                    scene.add(mallocmand);
                    onWindowResize();
                } else if (choice == 1) { // Correspond à l'affichage "après"
                    $('#malloc').hide();
                    $('#setup').removeClass().addClass('no-padding col-md-10').show();
                    scene2.remove(selectedObjet);
                    scene2.remove(mallocmax);
                    scene2.remove(mallocmand);
                    scene.add(mallocmax);
                    scene.add(mallocmand);
                    onWindowResize();
                } else if (choice == 2) { // Correspond à l'affichage "Avant + Après"
                    $('#setup').hide().removeClass().addClass('no-padding col-md-5').show();
                    $('#malloc').hide().removeClass().addClass('no-padding col-md-5').show();
                    scene2.remove(selectedObjet);
                    scene2.remove(mallocmax);
                    scene2.remove(mallocmand);
                    scene.add(mallocmax);
                    scene.add(mallocmand);
                    onWindowResize();
                } else {
                    $('#malloc').hide();
                    $('#setup').removeClass().addClass('no-padding col-md-10').show();
                    scene2.add(mallocmax);
                    scene2.add(mallocmand);
                    if (actualPosition == 'maxilaire') {
                        mallocmax.visible = true;
                        setupmax.visible = true;
                        mallocmand.visible = false;
                        setupmand.visible = false;
                    } else if (actualPosition == 'mandibulaire') {
                        mallocmax.visible = false;
                        setupmax.visible = false;
                        mallocmand.visible = true;
                        setupmand.visible = true;
                    } else {
                        mallocmax.visible = true;
                        setupmax.visible = true;
                        mallocmand.visible = true;
                        setupmand.visible = true;
                    }
                    onWindowResize();

                }
            });
        }


    </script>
{% endblock %}
