{% extends 'base.html.twig' %}
{% block title %}Viewer 3D{% endblock %}
{% block navbar %}
{% endblock %}
{% block body %}
<div class="no-padding col-md-12">
    <div class="col-md-6 no-padding" id="malloc"></div>
    <div class="col-md-6 no-padding" id="setup"></div>
</div>
{% endblock %}
{% block stylesheets %}
    <style>
        body {
            overflow: hidden;
            margin: 0;
            padding: 0;
            background: hsl(0, 0%, 10%);
        }

        .no-padding {
            padding:0!important;
        }
        p {
            margin: 0;
            padding: 0;
        }


        a {
            color: #f58231;
        }
    </style>
{% endblock %}
{% block javascript %}
    <script src="{{ asset('bundles/viewer/js/three.js') }}"></script>
    <script src="{{ asset('bundles/viewer/js/Detector.js') }}"></script>
    <script src="{{ asset('bundles/viewer/js/OrbitControls.js') }}"></script>
    <script src="{{ asset('bundles/viewer/js/OBJLoader.js') }}"></script>
    <script src="{{ asset('bundles/viewer/js/MTLLoader.js') }}"></script>

    <script>

        if (!Detector.webgl) {
            Detector.addGetWebGLMessage();
        }

        var container;

        var camera, controls, controls2, scene, scene2, renderer, renderer2;
        var lighting, ambient, keyLight, fillLight, backLight;

        var windowHalfX = window.innerWidth / 2;
        var windowHalfY = window.innerHeight / 2;

        init();
        animate();

        function init() {

            containerMalloc = document.getElementById('malloc');
            containerSetup = document.getElementById('setup');

            /* Camera */

            camera = new THREE.PerspectiveCamera(30, (window.innerWidth / 2) / window.innerHeight , 1, 10000);
            camera.position.z = 300;

            /* Scene */

            scene = new THREE.Scene();
            scene2 = new THREE.Scene();

            lighting = false;

            var light = new THREE.AmbientLight( 0xffffff ); // soft white light
            scene.add( light );

            light = new THREE.DirectionalLight( 0xffffff );
            light.position.set( 1, 1, 1 );
            scene.add( light );

            light = new THREE.AmbientLight( 0xffffff ); // soft white light
            scene2.add( light );

            light = new THREE.DirectionalLight( 0xffffff );
            light.position.set( 1, 1, 1 );
            scene2.add( light );


            /* Model */

            var mtlLoader = new THREE.MTLLoader();
            mtlLoader.setBaseUrl('../../uploads/documents/');
            mtlLoader.setPath('../../uploads/documents/');
            mtlLoader.load('{{ folder.path2 }}', function (materials) {


                var objLoader = new THREE.OBJLoader();
                objLoader.setMaterials(materials);
                objLoader.setPath('../../uploads/documents/');
                objLoader.load('{{ folder.path1 }}', function (object) {

                    scene.add(object);

                });

            });

            mtlLoader = new THREE.MTLLoader();
            mtlLoader.setBaseUrl('../../uploads/documents/');
            mtlLoader.setPath('../../uploads/documents/');
            mtlLoader.load('{{ folder.path4 }}', function (materials) {


                var objLoader = new THREE.OBJLoader();
                objLoader.setMaterials(materials);
                objLoader.setPath('../../uploads/documents/');
                objLoader.load('{{ folder.path3 }}', function (object) {

                    scene2.add(object);

                });

            });

            /* Renderer */

            renderer = new THREE.WebGLRenderer({ antialias: true});
            renderer.setSize(containerMalloc.offsetWidth , window.innerHeight);
            renderer.setPixelRatio( window.devicePixelRatio );
            renderer.setClearColor(new THREE.Color("hsl(0, 0%, 10%)"));

            renderer2 = new THREE.WebGLRenderer( { antialias: true});
            renderer2.setPixelRatio(window.devicePixelRatio);
            renderer2.setSize(containerSetup.offsetWidth , window.innerHeight);
            renderer2.setClearColor( new THREE.Color("hsl(0, 0%, 10%)") );

            containerMalloc.appendChild(renderer.domElement);
            containerSetup.appendChild(renderer2.domElement);

            /* Controls */

            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.25;
            controls.enableZoom = true;

            controls2 = new THREE.OrbitControls(camera, renderer2.domElement);
            controls2.enableDamping = true;
            controls2.dampingFactor = 0.25;
            controls2.enableZoom = true;


        }


        function animate() {

            requestAnimationFrame(animate);

            controls.update();
            controls2.update();

            render();

        }

        function render() {

            renderer.render(scene, camera);
            renderer2.render(scene2, camera);

        }

    </script>
{% endblock %}
