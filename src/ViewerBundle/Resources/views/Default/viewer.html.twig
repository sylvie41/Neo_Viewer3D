{% extends 'base.html.twig' %}
{% block title %}Viewer 3D{% endblock %}
{% block navbar %}
{% endblock %}
{% block body %}
<div class="no-padding col-md-12">
    <div class="col-md-6 no-padding" id="malloc"></div>
    <div class="col-md-6 no-padding" id="setup"></div>
</div>
{% endblock %}
{% block stylesheets %}
    <style>
        body {
            overflow: hidden;
            margin: 0;
            padding: 0;
            background-color: #000000;
        }

        .no-padding {
            padding:0!important;
        }
        p {
            margin: 0;
            padding: 0;
        }


        a {
            color: #f58231;
        }
    </style>
{% endblock %}
{% block javascript %}
    <script src="{{ asset('bundles/viewer/js/three.js') }}"></script>
    <script src="{{ asset('bundles/viewer/js/Detector.js') }}"></script>
    <script src="{{ asset('bundles/viewer/js/OrbitControls.js') }}"></script>
    <script src="{{ asset('bundles/viewer/js/OBJLoader.js') }}"></script>
    <script src="{{ asset('bundles/viewer/js/MTLLoader.js') }}"></script>

    <script>
        $( document ).ready(function() {
            alert('toto');
        });

        if (!Detector.webgl) {
            Detector.addGetWebGLMessage();
        }

        var containerMalloc, containerSetup;

        var camera, controls, controls2, scene, scene2, renderer, renderer2;
        var lighting, ambient, keyLight, fillLight, backLight;

        var windowHalfX = window.innerWidth / 2;
        var windowHalfY = window.innerHeight / 2;

        init();
        animate();

        function init() {

            containerMalloc = document.getElementById('malloc');
            containerSetup = document.getElementById('setup');

            /* Camera */


            camera = new THREE.PerspectiveCamera(20, (window.innerWidth / 2) / window.innerHeight, 1, 10000);
            camera.position.z = 300;

            /* Scene */

            scene = new THREE.Scene();
            scene2 = new THREE.Scene();

            lighting = false;

            var light = new THREE.AmbientLight( 0xcccccc ); // soft white light
            scene.add( light );

            var light2 = new THREE.SpotLight( 0xffffff );
            light2.position.set( 0, 100, 100 );
            light2.castShadow = true;
            light2.shadow.mapSize.width = 500;
            light2.shadow.mapSize.height = 500;
            light2.shadow.camera.near = 500;
            light2.shadow.camera.far = 400;
            light2.shadow.camera.fov = 30;
            scene.add( light2 );

            var light3 = new THREE.DirectionalLight( 0x999999 );
            light3.position.set( 0, -100, -50 );
            scene.add( light3 );


            var light4 = new THREE.AmbientLight( 0xffffff ); // soft white light
            scene2.add( light4 );



            var light5 = new THREE.SpotLight( 0xffffff, 1, 186, 1, 0, 2);
            light5.position.set( 0, 100, 100 );
            light5.castShadow = true;
            light5.shadow.mapSize.width = 500;
            light5.shadow.mapSize.height = 500;
            light5.shadow.camera.near = 500;
            light5.shadow.camera.far = 400;
            light5.shadow.camera.fov = 30;
            scene2.add( light5 );

            var light6 = new THREE.DirectionalLight( 0x1D3824, 0.5 );
            light6.position.set( 0, -100, -50 );
            scene2.add( light6 );

            var light7 = new THREE.DirectionalLight( 0x1D3824, 0.5 );
            light7.position.set( 10, 30, 50 );
            /*var helper = new THREE .DirectionalLightHelper( light7, 3);
            scene2.add(helper);*/
            scene2.add( light7 );

            var light8 = new THREE.DirectionalLight( 0x4ABD6A, 0.5 );
            light8.position.set( -50, 100, 50 );
            scene2.add( light8 );


            /* Model */

            var mtlLoader = new THREE.MTLLoader();
            mtlLoader.setBaseUrl('../../uploads/documents/');
            mtlLoader.setPath('../../uploads/documents/');
            mtlLoader.load('{{ folder.path2 }}', function (materials) {


                var objLoader = new THREE.OBJLoader();
                objLoader.setMaterials(materials);
                objLoader.setPath('../../uploads/documents/');
                objLoader.load('{{ folder.path1 }}', function (object) {

                    scene.add(object);

                });

            });

            mtlLoader = new THREE.MTLLoader();
            mtlLoader.setBaseUrl('../../uploads/documents/');
            mtlLoader.setPath('../../uploads/documents/');
            mtlLoader.load('{{ folder.path4 }}', function (materials) {


                var objLoader = new THREE.OBJLoader();
                objLoader.setMaterials(materials);
                objLoader.setPath('../../uploads/documents/');
                objLoader.load('{{ folder.path3 }}', function (object) {

                    scene2.add(object);

                });

            });

            /* Renderer */
            renderer = new THREE.WebGLRenderer({ antialias: true});
            renderer.setSize(containerMalloc.offsetWidth , window.innerHeight);
            renderer.setPixelRatio( window.devicePixelRatio );
            renderer.setClearColor(new THREE.Color("hsl(0, 0%, 10%)"));

            renderer2 = new THREE.WebGLRenderer( { antialias: true});
            renderer2.setPixelRatio(window.devicePixelRatio);
            renderer2.setSize(containerSetup.offsetWidth , window.innerHeight);
            renderer2.setClearColor( new THREE.Color("hsl(0, 0%, 10%)") );

            containerMalloc.appendChild(renderer.domElement);
            containerSetup.appendChild(renderer2.domElement);

            /* Controls */

            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.25;
            controls.enableZoom = true;

            controls2 = new THREE.OrbitControls(camera, renderer2.domElement);
            controls2.enableDamping = true;
            controls2.dampingFactor = 0.25;
            controls2.enableZoom = true;


        }


        function animate() {

            requestAnimationFrame(animate);

            controls.update();
            controls2.update();

            render();

        }

        function render() {

            renderer.render(scene, camera);
            renderer2.render(scene2, camera);

        }

    </script>
{% endblock %}
