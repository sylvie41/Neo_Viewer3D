{% extends 'base.html.twig' %}
{% block title %}Viewer 3D{% endblock %}
{% block body %}

{% endblock %}
{% block stylesheet %}
    <style>
        body {
            overflow: hidden;
            margin: 0;
            padding: 0;
            background: hsl(0, 0%, 10%);
        }

        p {
            margin: 0;
            padding: 0;
        }

        .left,
        .right {
            position: absolute;
            color: #fff;
            font-family: Geneva, sans-serif;
        }

        .left {
            bottom: 1em;
            left: 1em;
            text-align: left;
        }

        .right {
            top: 0;
            right: 0;
            text-align: right;
        }

        a {
            color: #f58231;
        }
    </style>
{% endblock %}
{% block javascript %}
    <script src="{{ asset('bundles/viewer/js/three.js') }}"></script>
    <script src="{{ asset('bundles/viewer/js/Detector.js') }}"></script>
    <script src="{{ asset('bundles/viewer/js/OrbitControls.js') }}"></script>
    <script src="{{ asset('bundles/viewer/js/OBJLoader.js') }}"></script>
    <script src="{{ asset('bundles/viewer/js/MTLLoader.js') }}"></script>

    <script>

        if (!Detector.webgl) {
            Detector.addGetWebGLMessage();
        }

        var container;

        var camera, controls, scene, scene2, renderer;
        var lighting, ambient, keyLight, fillLight, backLight;

        var windowHalfX = window.innerWidth / 2;
        var windowHalfY = window.innerHeight / 2;

        init();
        animate();

        function init() {

            container = document.createElement('div');
            document.body.appendChild(container);

            /* Camera */

            camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);
            camera.position.z = 300;

            /* Scene */

            scene = new THREE.Scene();
            scene2 = new THREE.Scene();

            lighting = false;

            var light = new THREE.AmbientLight( 0xffffff ); // soft white light
            scene.add( light );

            light = new THREE.DirectionalLight( 0xffffff );
            light.position.set( 1, 1, 1 );
            scene.add( light );

            light = new THREE.AmbientLight( 0xffffff ); // soft white light
            scene2.add( light );

            light = new THREE.DirectionalLight( 0xffffff );
            light.position.set( 1, 1, 1 );
            scene2.add( light );


            /* Model */

            var mtlLoader = new THREE.MTLLoader();
            mtlLoader.setBaseUrl('../../uploads/documents/');
            mtlLoader.setPath('../../uploads/documents/');
            mtlLoader.load('{{ folder.path2 }}', function (materials) {


                var objLoader = new THREE.OBJLoader();
                objLoader.setMaterials(materials);
                objLoader.setPath('../../uploads/documents/');
                objLoader.load('{{ folder.path1 }}', function (object) {

                    scene.add(object);

                });

            });

            mtlLoader = new THREE.MTLLoader();
            mtlLoader.setBaseUrl('../../uploads/documents/');
            mtlLoader.setPath('../../uploads/documents/');
            mtlLoader.load('{{ folder.path4 }}', function (materials) {


                var objLoader = new THREE.OBJLoader();
                objLoader.setMaterials(materials);
                objLoader.setPath('../../uploads/documents/');
                objLoader.load('{{ folder.path3 }}', function (object) {

                    scene2.add(object);

                });

            });

            /* Renderer */

            renderer = new THREE.WebGLRenderer();
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setClearColor(new THREE.Color("hsl(0, 0%, 10%)"));

            container.appendChild(renderer.domElement);

            /* Controls */

            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.25;
            controls.enableZoom = true;

            // axes
            var axes = new THREE.AxisHelper( 100 ); // this will be on top
            scene2.add( axes );

            /* Events */

            window.addEventListener('resize', onWindowResize, false);
            window.addEventListener('keydown', onKeyboardEvent, false);

        }

        function onWindowResize() {

            windowHalfX = window.innerWidth / 2;
            windowHalfY = window.innerHeight / 2;

            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            renderer.setSize(window.innerWidth, window.innerHeight);

        }

        function onKeyboardEvent(e) {

            if (e.code === 'KeyL') {

                lighting = !lighting;

                if (lighting) {

                    ambient.intensity = 0.25;
                    scene.add(keyLight);
                    scene.add(fillLight);
                    scene.add(backLight);

                } else {

                    ambient.intensity = 1.0;
                    scene.remove(keyLight);
                    scene.remove(fillLight);
                    scene.remove(backLight);

                }

            }

        }

        function animate() {

            requestAnimationFrame(animate);

            controls.update();

            render();

        }

        function render() {

            renderer.render(scene, camera);

        }

    </script>
{% endblock %}
